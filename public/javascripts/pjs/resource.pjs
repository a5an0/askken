/***************************************************************
/* Resource
/**************************************************************/

public class Resource {
  boolean selected = false;
  boolean hovering = false;
  boolean dragging = false;
	boolean transitioning = false;

	float targetWeight = 1.0;
	float highlightedWeight = 4.0;
	
	float diameter = 16;

	Attribute selectedAttribute = null;
	Attribute previousSelectedAttribute = null;
		
	float angleAdjustment = PI/2;

  boolean open = true;
	int numValues = 0;
	
  int myColor = color(255);
  int myStrokeWeight = 1;
  int myStrokeColor = color(100);
  int myFillColor = color(200);

	float x;
	float y;

  // internals
  ArrayList attributes;

  int radius = 97;
  float radiusOuter = 200;
  int n = 40;
  float angle = 0;

  String id = "";
  String name = "";

  public Resource(String id, String name) {
		this.attributes = new ArrayList();
		this.id = id;
    this.name = name;
  }

	public void setPos(float x, float y) {
		this.x = x;
		this.y = y;
	}

	public void setAngleAdjustment(float angleAdjustment) {
		this.angleAdjustment = angleAdjustment;
	}

	public void setSelectedAttribute(attr) {
		this.previousSelectedAttribute = this.selectedAttribute;
		this.selectedAttribute = attr;
	}
	
	public Attribute getSelectedAttribute() {
		return this.selectedAttribute;
	}
	
	public setRadiusOuter(float radiusOuter) {
		this.radiusOuter = radiusOuter;
	}
	
	public float getRadiusOuter() {
		return this.radiusOuter;
	}
	
	public float getRadius() {
		return this.radius;
	}

	public String getId() {
		return this.id;
	}

  public String getName() {
    return this.name;
  }

  public void setFill(color c) {
    this.myColor = c; 
  }

  public void setStroke(int weight, color c) {
    this.myStrokeWeight = weight;
    this.myStrokeColor = c;
  }

  public void setClosed() {
    open = false;
  }

  public void setOpen() {
    open = true;
  }

  public String getId() {
    return id;
  }

  public String getType() {
    return this.type; 
  }

	public void setNumValues(int numValues) {
		this.numValues = numValues;
	}

	public void update() {
		float angleStart = angleAdjustment;
		float angleStop = angleAdjustment;
		
		var selectedAttributeCount = 0;
		
		if (selectedAttribute!= null)
			selectedAttributeCount = selectedAttribute.values.size();
			
		float totalWeight = 0;
		for (int i=0; i < attributes.size(); i++) {
			totalWeight += attributes[i].weight*attributes[i].getValues().size();
		}
		
		for (int i = 0 ; i < attributes.size(); i++) {
			Attribute attribute = attributes[i];
			ArrayList values = attribute.getValues();
			
			attribute.setPos(this.x+cos(angle)*radius, this.y+sin(angle)*radius)
			attribute.setCol(colors[i%8]);
						
			float angleOuterStart = angleStop;
			float angleOuterStop = angleStop;
			
			for (int j = 0; j < values.size(); j++) {
				// outer orbit
				angleOuterStart = angleOuterStop;
				
				// calculate dependent on weight (selected attributes have more weight)
				float weight = 1;
				if (selectedAttribute!= null && selectedAttribute==attribute) {
					weight = highlightedWeight;
				}
				angleOuterStop += attribute.weight * TWO_PI / totalWeight;
								
				values[j].setAngles(angleOuterStart, angleOuterStop);
			}
		
			// calculate dimension
			percentage = values.size() / numValues;
			angleStart = angleStop;
			angleStop = angleOuterStop;
			
			attribute.setAngles(angleStart, angleStop);
			attribute.setCol(colors[i%8]);
		}
	}

  void setSelected(boolean b) {
    selected = b;
  }

	public boolean isSelected() {
		return hovering;
	}

  void setHovering(boolean b) {
    hovering = b;
  }

	public boolean isHovering() {
		return hovering;
	}

  void setDragging(boolean b) {
    dragging = b;
  }

	public boolean isDragging() {
		return dragging;
	}

  public void addAttribute(Attribute attr) {
    attributes.add(attr);
  }

	public ArrayList getValues() {
		ArrayList vals = new ArrayList();
		for (int i = 0; i < this.attributes.size(); i++) {
			for (int j = 0; j < this.attributes[i].values.size(); j++) {
				vals.add(this.attributes[i].values[j]);
			}
		}
		return vals;
	}
	
	public void draw() {
		if (open) {
			noStroke();
			// draw attributes
			for (int i = 0 ; i < attributes.size(); i++) {
				Attribute attribute = attributes[i];
				ArrayList values = attribute.getValues();
				
				fill(attribute.col);
				arc(this.x, this.y, radiusOuter*2, radiusOuter*2, attribute.angleStart, attribute.angleStop);
				arc(this.x, this.y, radiusOuter*2+20, radiusOuter*2+20, attribute.angleStart, attribute.angleStop);
				
				for (int j = 0; j < values.size(); j++) {
					if (values[j].isHovering())
						arc(this.x, this.y, radiusOuter*2+20, radiusOuter*2+20, values[j].angleStart, values[j].angleStop);
				}
			}
			
			// spacer
			fill(255);
			ellipse(this.x, this.y, radius*2, radius*2);

			// attribute label background
			if (selectedAttribute) 
				fill(selectedAttribute.col);
			else
				fill(190, 190, 190, 100);
			
			ellipse(this.x, this.y, 160, 160);
			ellipse(this.x, this.y, 180, 180);
			
			// spacer
			fill(255);
			ellipse(this.x, this.y, 100, 100);

			// draw values
			for (int i = 0 ; i < attributes.size(); i++) {
				Attribute attribute = attributes[i];
				ArrayList values = attribute.getValues();
				for (int j = 0; j < values.size(); j++) {
					// draw separator
					stroke(colors[i%8]);
				  values[j].draw();
				}
				// draw labels
				attribute.draw();
			}
			
		}	else { // draw closed
			noStroke();
			
			if (hovering)
				fill(180, 180, 180, 100);
			else
				fill(222, 222, 222, 100);
			
			ellipse(this.x, this.y, 110, 110);
			ellipse(this.x, this.y, 130, 130);
			
			// spacer
			fill(255);
			ellipse(this.x, this.y, 50, 50);
		}
		
		if (hovering)
			fill(0,0,0,150);
		else
			fill(66, 66, 66, 100);
		
		ellipse(this.x,this.y, diameter, diameter);
		
		if (hovering)
			fill(33);
		else
			fill(120, 120, 120, 150);
		
		fontWidth = defaultFont.width(this.getName()) * fontSize;
		text(this.getName(), this.x-fontWidth/2, this.y+10);
		noStroke();
	}
	
	public boolean mouseOver() {
	  float disX = this.x - mouseX;
	  float disY = this.y - mouseY;
		
	  if(sqrt(sq(disX) + sq(disY)) < diameter/2 ) {
			hovering = true;
	    return true;
		} else {
			hovering = false;
			return false;
		}
	}
}